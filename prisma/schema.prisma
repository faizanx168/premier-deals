// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum UserRole {
  ADMIN
  REALTOR
  USER
}

enum PropertyType {
  SALE
  RENT
  LAND
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  RENTED
}

enum InquiryStatus {
  NEW
  CONTACTED
  VIEWING_SCHEDULED
  OFFER_MADE
  CLOSED
  SPAM
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  password         String
  role             UserRole  @default(USER)
  emailVerified    DateTime?
  verificationToken String?  @unique
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  properties Property[]
  inquiries  Inquiry[]

  @@map("users")
}

model Property {
  id          String         @id @default(cuid())
  title       String
  description String
  price       Float
  type        PropertyType
  status      PropertyStatus @default(ACTIVE)
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  address     String
  city        String
  state       String
  zipCode     String?
  featured    Boolean        @default(false)
  views       Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  images    PropertyImage[]
  amenities PropertyAmenity[]
  inquiries Inquiry[]

  @@map("properties")
}

model PropertyImage {
  id         String @id @default(cuid())
  url        String
  isPrimary  Boolean @default(false)
  createdAt  DateTime @default(now())

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

model Amenity {
  id          String @id @default(cuid())
  name        String @unique
  category    String
  description String?
  createdAt   DateTime @default(now())

  properties PropertyAmenity[]

  @@map("amenities")
}

model PropertyAmenity {
  id         String @id @default(cuid())

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  amenityId  String
  amenity    Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([propertyId, amenityId])
  @@map("property_amenities")
}

model Inquiry {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  status    InquiryStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  userId    String?
  user      User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("inquiries")
}
